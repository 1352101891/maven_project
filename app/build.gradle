plugins {
    id 'com.android.application'
    id 'kotlin-android'
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    applicationVariants.all { variant ->
        variant.outputs.all {
            if (variant.buildType.name != "debug") {
                variant.packageApplication.outputDirectory = new File(project.rootDir.absolutePath + "/app/output")
            }
            outputFileName = "${rootProject.ext.applicationId}_${variant.flavorName}_${variant.buildType.name}_${project.android.defaultConfig.versionName}.apk"
        }
    }

    defaultConfig {
        applicationId rootProject.ext.applicationId
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode project.hasProperty('VERSION_CODE') ? Integer.parseInt(VERSION_CODE) : rootProject.ext.versionCode
        versionName project.hasProperty('VERSION_NAME') ? VERSION_NAME : rootProject.ext.versionName
        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {
    implementation 'com.example:lvlibrary:1.0.3'
    // https://mvnrepository.com/artifact/androidx.multidex/multidex
    implementation group: 'androidx.multidex', name: 'multidex', version: '2.0.1'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    implementation  project(':PermissionUtil')
}

task copyOutputTask(type: Copy) {
    from project.rootDir.absolutePath + "/app/output"
    into project.rootDir.absolutePath + "/output"
}

tasks.whenTaskAdded { task ->
    if (task.name == 'assembleDebug') {
        copyOutputTask.dependsOn task
    }
}